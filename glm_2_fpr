import os
import pandas as pd
import nibabel as nib
from nilearn.glm.second_level import SecondLevelModel
from nilearn.plotting import plot_glass_brain
from nilearn.glm.thresholding import threshold_stats_img

# パラメータの設定
base_dir = '/data/Project/glm_individual'
output_dir = '/data/Project/glm_group'
conditions = ['Encoding_Animate', 'Encoding_Inanimate', 'Retrieval_Animate', 'Retrieval_Inanimate']
contrast_ids = [
    'Encoding_Animate > Encoding_Inanimate', 'Encoding_Animate > Retrieval_Animate',
    'Encoding_Animate > Retrieval_Inanimate', 'Encoding_Inanimate > Retrieval_Animate',
    'Encoding_Inanimate > Retrieval_Inanimate', 'Retrieval_Animate > Retrieval_Inanimate',
    'Encoding > Retrieval', 'Animate > Inanimate'
]

# 被験者リスト
subjects = []

# コントラストファイルパスを収集する関数
def collect_contrast_images(subjects, contrast_id, base_output_dir):
    contrast_images = []
    for subject_id in subjects:
        contrast_path = os.path.join(base_output_dir, f'sub-{subject_id}', f'{subject_id}_{contrast_id.replace(" ", "_")}_z_map.nii.gz')
        if os.path.exists(contrast_path):
            contrast_images.append(contrast_path)
        else:
            print(f'Contrast image not found for subject {subject_id} and contrast {contrast_id}')
    return contrast_images

# セカンドレベル解析（共通効果）を実行する関数
def run_second_level_common_effect(contrast_id, subjects):
    contrast_imgs = collect_contrast_images(subjects, contrast_id, base_dir)
    
    if not contrast_imgs:
        print(f'No valid contrast images for {contrast_id}')
        return
    
    # デザインマトリックスの作成（共通効果のみ）
    design_matrix = pd.DataFrame([1] * len(contrast_imgs), columns=['intercept'])
    
    # コントラスト画像をNifti1Imageとして読み込み
    contrast_imgs = [nib.load(img_path) for img_path in contrast_imgs]
    
    # SecondLevelModelの初期化
    second_level_model = SecondLevelModel()
    second_level_model = second_level_model.fit(contrast_imgs, design_matrix=design_matrix)
    
    # コントラストの定義（共通効果）
    z_map_common = second_level_model.compute_contrast('intercept', output_type='z_score')
    _, threshold_common = threshold_stats_img(z_map_common, alpha=.001, height_control='fpr')
    
    plot_glass_brain(z_map_common, threshold=threshold_common, display_mode='lyrz', black_bg=True, colorbar=True, plot_abs=False)
    
    z_map_common_path = os.path.join(output_dir, f'{contrast_id.replace(" ", "_")}_second_level_common_z_map.nii.gz')
    nib.save(z_map_common, z_map_common_path)
    
    display_common = plot_glass_brain(z_map_common, threshold=threshold_common, display_mode='lyrz', black_bg=True, colorbar=True, plot_abs=False)
    plot_common_path = os.path.join(output_dir, f'{contrast_id.replace(" ", "_")}_second_level_common_z_map.png')
    display_common.savefig(plot_common_path)
    display_common.close()
    
    print(f'Second level analysis for common effect completed for contrast: {contrast_id}')

# メイン処理
def main():
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    for contrast_id in contrast_ids:
        run_second_level_common_effect(contrast_id, subjects)

if __name__ == "__main__":
    main()